ggrepel::geom_text_repel(data = filter(plsda_scores, Activity %in% "Low"),
aes(label = Names), force = 5, xlim = c(NA, 80),
ylim = c(-50, 50))
ggsave(filename = "FAugusto_plsda_scores.jpg", plot = plsda_scr,
path = "./results", width = 6, height = 4, units = "in", dpi = 600)
plsda_scr <-  ggplot(plsda_scores, aes(comp1, comp2,
color = Activity, shape = Strain)) +
geom_point(size = 3, alpha = 0.8) +
#geom_jitter(position = position_jitter(width = 30, height = 30)) +
theme_bw() + scale_color_aaas()+
labs(x = "LV1 (34%)", y = "LV2 (10%)") +
geom_vline(xintercept = 0, col = "skyblue") +
ggrepel::geom_text_repel(data = filter(plsda_scores, Activity %in% "Low"),
aes(label = Names), force = 5, xlim = c(NA, 80),
ylim = c(-100, 75))
ggsave(filename = "FAugusto_plsda_scores.jpg", plot = plsda_scr,
path = "./results", width = 6, height = 4, units = "in", dpi = 600)
plsda_scr <-  ggplot(plsda_scores, aes(comp1, comp2,
color = Activity, shape = Strain)) +
geom_point(size = 3, alpha = 0.8) +
#geom_jitter(position = position_jitter(width = 30, height = 30)) +
theme_bw() + scale_color_aaas()+
labs(x = "LV1 (34%)", y = "LV2 (10%)") +
geom_vline(xintercept = 0, col = "skyblue") +
ggrepel::geom_text_repel(data = filter(plsda_scores, Activity %in% "Low"),
aes(label = Names), force = 5, xlim = c(NA, 80),
ylim = c(-100, 75))
ggsave(filename = "FAugusto_plsda_scores.jpg", plot = plsda_scr,
path = "./results", width = 6, height = 4, units = "in", dpi = 600)
plsda_scr <-  ggplot(plsda_scores, aes(comp1, comp2,
color = Activity, shape = Strain)) +
geom_point(size = 3, alpha = 0.8) +
#geom_jitter(position = position_jitter(width = 30, height = 30)) +
theme_bw() + scale_color_aaas()+
labs(x = "LV1 (34%)", y = "LV2 (10%)") +
geom_vline(xintercept = 0, col = "skyblue") +
ggrepel::geom_text_repel(data = filter(plsda_scores, Activity %in% "Low"),
aes(label = Names), force = 5, xlim = c(50, 80),
ylim = c(-100, 75))
ggsave(filename = "FAugusto_plsda_scores.jpg", plot = plsda_scr,
path = "./results", width = 6, height = 4, units = "in", dpi = 600)
setwd("~/Daniel/RGCxGC")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
load("~/Daniel/Fabio Augusto/PLSDA.RData")
# Add needed libraries
library(tidyverse) # Easily Install and Load the 'Tidyverse'
library(RGCxGC) # GCxGC chemometrics
library(colorRamps) # Builds color tables
library(ggsci) # Scientific Journal and Sci-Fi Themed Color Palettes for
library(mixOmics) # PLS-DA omics
colfunc <- colorRampPalette(c("red", "yellow", "springgreen", "royalblue"))
#### Mix Omics ####
list_chrom <- unfold_chrom(all_chrom)
unfolded_chrom <- list_chrom$chromatogram
colnames(unfolded_chrom) <- paste0("RT", seq(dim(unfolded_chrom)[2]))
Index_chrom <- tibble(Names = rownames(unfolded_chrom))
all_index <- left_join(Index_chrom, metadata, by = "Names") %>%
mutate(Index =  seq(n()), Activity = factor(Activity) )
Y <- all_index$Activity
set.seed(10)
srbct_plsda <- plsda(unfolded_chrom, Y, ncomp = 2)
background <- background.predict(srbct_plsda, comp.predicted=2,
dist = "max.dist")
plotIndiv(srbct_plsda, comp = 1:2,
group = Y, ind.names = FALSE,
legend = TRUE,  background = background)
chrom_dim <- ncol(unfolded_chrom)
test.keepX <- list.keepX <- seq(chrom_dim/3, chrom_dim, 6000)
perf_plsda <- perf(srbct_plsda, validation = "Mfold", folds = 5,
progressBar = T, auc = T, nrepeat = 10, cpus = 12)
tune_plsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'Mfold', folds = 5,
progressBar = T, dist = 'max.dist',cpus = 12,
test.keepX = list.keepX, nrepeat = 10)
ncom <- tune_plsda$choice.ncomp$ncomp +1
test_keepX <- tune_plsda$choice.keepX
final_splsda <- splsda(unfolded_chrom, Y, ncomp = 2)
final_splsda2 <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = test_keepX)
perf.splsda <- perf(final_splsda, validation = "Mfold", folds = 5,cpus = 12,
progressBar = T, auc = TRUE, nrepeat = 10)
plotIndiv(final_splsda2)
auroc(final_splsda2)
auroc(final_splsda2)
# Scores
metadata <- read_csv("activity.csv") %>%
mutate(Activity = factor(Activity, levels = c("Low", 'High') ))
plsda_scores <- final_splsda2$variates$X %>% as.data.frame() %>%
mutate(Names = rownames(.)) %>% left_join(metadata)
plsda_scr <-  ggplot(plsda_scores, aes(comp1, comp2,
color = Activity, shape = Strain)) +
geom_point(size = 3, alpha = 0.8) +
#geom_jitter(position = position_jitter(width = 30, height = 30)) +
theme_bw() + scale_color_aaas()+
labs(x = "LV1 (34%)", y = "LV2 (10%)") +
geom_vline(xintercept = 0, col = "skyblue") +
ggrepel::geom_text_repel(data = filter(plsda_scores, Activity %in% "Low"),
aes(label = Names), force = 5, xlim = c(50, 80),
ylim = c(-100, 75))
plsda_scr
setwd("~/Daniel/Fabio Augusto")
tmp <- read_chrom(name = 'data/a08_1.CDF', mod_time = 5)
plot(tmp)
tmp <- read_chrom(name = 'data/a08_1.CDF', mod_time = 5, nlevels = 50, color.palette =  matlab.like)
plot(tmp, nlevels = 50, color.palette =  matlab.like)
tmp <- read_chrom(name = 'data/a08_1.CDF', mod_time = 6, nlevels = 50, color.palette =  matlab.like)
tmp <- read_chrom(name = 'data/a08_1.CDF', mod_time = 6)
plot(tmp, nlevels = 50, color.palette =  matlab.like)
tmp2 <- import_mixOmics(tmp, final_splsda2)
is(final_splsda2, "mixo_splsda")
!(is(final_splsda2, "mixo_splsda") | is(final_splsda2, "mixo_plsda"))
model <- final_splsda2
!(is(model, "mixo_splsda") | is(model, "mixo_plsda"))
raw_loadings <- model$loadings$X
chromatogram <- tmp
raw_loadings <- model$loadings$X
chrom <- chromatogram@chromatogram
n_row <- nrow(chrom)
n_col <- ncol(chrom)
loadings_2d <- sapply(raw_loadings,
FUN = function(lds, n_row, n_col){
matrix(lds, ncol = n_col, nrow = n_row, byrow = T)
}, n_row = n_row, n_col = n_col  )
loadings_2d <- lapply(raw_loadings,
FUN = function(lds, n_row, n_col){
matrix(lds, ncol = n_col, nrow = n_row, byrow = T)
}, n_row = n_row, n_col = n_col  )
View(raw_loadings)
class(raw_loadings)
a <- matrix(1:10, ncol = 2)
a
lapply(a, function(x) x+1 )
sapply(a, function(x) x+1 )
raw_loadings <- as.data.frame(model$loadings$X)
chrom <- chromatogram@chromatogram
n_row <- nrow(chrom)
n_col <- ncol(chrom)
loadings_2d <- lapply(raw_loadings,
FUN = function(lds, n_row, n_col){
matrix(lds, ncol = n_col, nrow = n_row, byrow = T)
}, n_row = n_row, n_col = n_col  )
getwd()
save(final_splsda2, file = "tmp.RData")
tmp2 <- import_mixOmics(tmp, final_splsda2)
setwd("~/Daniel/RGCxGC")
devtools::load_all(".")
tmp2 <- import_mixOmics(tmp, final_splsda2)
plot_loading(tmp2)
length(tmp2@loadings)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
tmp2 <- import_mixOmics(tmp, final_splsda2)
plot_loading(tmp2)
new("PLSDA")
devtools::load_all(".")
new("PLSDA")
devtools::load_all(".")
Object <- tmp2
is(Object, "PLSDA")
npcs <- length(Object@loadings)
pc > npcs
1 > npcs
seq(Object@time[1], Object@time[2]
)
seq(Object@time[1], Object@time[2],
length.out = 5)
seq( Object@mod_time[1], Object@mod_time[2],
length.out = 5)
Object@time
Object@mod_time\
Object@mod_time
devtools::load_all(".")
tmp2 <- import_mixOmics(final_splsda2)
plot(tmp)
tmp2 <- import_mixOmics(tmp, final_splsda2)
tmp2@time
devtools::load_all(".")
plot_loading(tmp2)
plot_loading(tmp2, type = "n")
plot_loading(tmp2, type = "n", color.palette = colfunc )
filled.contour(tmp2@loadings$comp1)
devtools::load_all(".")
plot_loading(tmp2, type = "n", color.palette = colfunc )
plot_loading(tmp2, type = "n", color.palette = colfunc )
devtools::load_all(".")
plot_loading(tmp2, type = "n", color.palette = colfunc, thresh = -0.006)
devtools::load_all(".")
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
devtools::load_all(".")
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
devtools::load_all(".")
load("~/Daniel/RGCxGC/data/Myrothecium.RData")
load("~/Daniel/RGCxGC/data/Myrothecium.RData")
devtools::load_all(".")
load("~/Daniel/RGCxGC/data/Myrothecium.RData")
load("~/Daniel/RGCxGC/data/Myrothecium.RData")
all_chrom@groups
getSlots(all_chrom)
getSlots(all_chrom)
getSlots(all_chrom, "groups")
devtools::load_all(".")
devtools::load_all(".")
data(Myrothecium)
myr_data <- metadada(all_chrom)
myr_data <- get_metadada(all_chrom)
myr_data <- get_metadata(all_chrom)
myr_data
View(myr_data)
library(mixOmics)
library(caret)
library(caret)
data(Myrothecium)
list_chrom <- unfold_chrom(all_chrom)
unfolded_chrom <- list_chrom$chromatogram
colnames(unfolded_chrom) <- paste0("RT", seq(dim(unfolded_chrom)[2]))
index <- get_metadata(all_chrom)
Y <- factor(all_index$Type)
Y <- factor(index$Type)
set.seed(10)
srbct_plsda <- plsda(unfolded_chrom, Y, ncomp = 3)
srbct_plsda <- plsda(unfolded_chrom, Y, ncomp = 3)
background <- background.predict(srbct_plsda, comp.predicted=2,
dist = "max.dist")
library(caret)
background <- background.predict(srbct_plsda, comp.predicted=2,
dist = "max.dist")
#' plotIndiv(srbct_plsda, comp = 1:2,
background <- background.predict(srbct_plsda, comp.predicted=2,
dist = "max.dist")
srbct_plsda <- plsda(unfolded_chrom, Y, ncomp = 3)
background <- background.predict(srbct_plsda, comp.predicted=2,
dist = "max.dist")
data(Myrothecium)
list_chrom <- unfold_chrom(all_chrom)
unfolded_chrom <- list_chrom$chromatogram
colnames(unfolded_chrom) <- paste0("RT", seq(dim(unfolded_chrom)[2]))
index <- get_metadata(all_chrom)
Y <- factor(index$Type)
set.seed(10)
# Tune pls-da
chrom_dim <- dim(unfolded_chrom)[2]
list.keepX <- seq(chrom_dim/3, chrom_dim, by = 5000)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'Mfold',
folds = 8,
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX, nrepeat = 20)
splsda_final <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = list.keepX)
#'
#' }
setMethod(f = "import_mixOmics", signature = "GCxGC",
definition = function(chromatogram, model, mod_time,
time_range, sampling_rt) {
if (!missing(chromatogram)) {
if ( !(is(model, "mixo_splsda") | is(model, "mixo_plsda")) )
stop("Please, provide a model builded by plsda or
splda function by mixOmics package")
raw_loadings <- as.data.frame(model$loadings$X)
chrom <- chromatogram@chromatogram
n_row <- nrow(chrom)
n_col <- ncol(chrom)
loadings_2d <- lapply(raw_loadings,
FUN = function(lds, n_row, n_col){
matrix(lds, ncol = n_col, nrow = n_row, byrow = T)
}, n_row = n_row, n_col = n_col  )
} else{
raw_loadings <- as.data.frame(model$loadings$X)
len_1d <- floor(sam_rate * mod_time)
len_2d <- floor(ncol(raw_loadings) / len_1d)
loadings_2d <- lapply(raw_loadings,
FUN = function(lds, n_row, n_col){
matrix(lds,nrow = len_1d, ncol = len_2d, byrow = T)
}  )
}
mod_time <- chromatogram@mod_time
time <- chromatogram@time
foreign_model <- new("PLSDA", loadings = loadings_2d,
mod_time = mod_time, time = time)
foreign_model
})
chrom_dim <- dim(unfolded_chrom)[2]
list.keepX <- seq(chrom_dim/3, chrom_dim, by = 5000)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'Mfold',
folds = 8,
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX, nrepeat = 20)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'Mfold',
folds = 2,
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX, nrepeat = 20)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'Mfold',
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX, nrepeat = 20)
?tune.splsda
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'loo',
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX, nrepeat = 20)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'loo',
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX)
graphics::plot(tune.splsda)
tune.splsda$choice.ncomp
tune.splsda$choice.keepX
splsda_final <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = list.keepX)
splsda_final <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = list.keepX)
library(mixOmics)
library(caret)
data(Myrothecium)
devtools::load_all(".")
data(Myrothecium)
list_chrom <- unfold_chrom(all_chrom)
unfolded_chrom <- list_chrom$chromatogram
colnames(unfolded_chrom) <- paste0("RT", seq(dim(unfolded_chrom)[2]))
index <- get_metadata(all_chrom)
Y <- factor(index$Type)
set.seed(10)
chrom_dim <- dim(unfolded_chrom)[2]
list.keepX <- seq(chrom_dim/3, chrom_dim, by = 5000)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'loo',
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX)
graphics::plot(tune.splsda)
tune.splsda$choice.keepX
splsda_final <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = list.keepX)
2000000*2/2000
2000000*2/2000*(2/2000)
2000000*200*2/(2000*2000)
2000000*100*2/(2000*2000)
splsda_final <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = list.keepX)
splsda_final <- splsda(unfolded_chrom, Y)
?nearZeroVar
tmp <- caret::nearZeroVar(unfolded_chrom)
zero_var <- caret::nearZeroVar(unfolded_chrom)
unfolded_chrom <- unfolded_chrom[, -zero_var]
splsda_final <- splsda(unfolded_chrom, Y)
?splsda
splsda_final <- mixOmics::splsda(unfolded_chrom, Y)
splsda_final <- mixOmics::splsda(unfolded_chrom, Y,
ncomp = 2, keepX = list.keepX)
splsda_final$variates$X
scores <- as.data.frame(splsda_final$variates$X)
scores
scores$Names <- rownames(scores)
score
scores
scores <- merge(scores, metadata)
all_chrom@groups
metadata <- get_metadata(all_chrom)
scores <- merge(scores, metadata)
scores
xyplot(comp2 ~ comp1, data = scores)
xyplot(comp2 ~ comp1, data = scores, groups = Type)
xyplot(comp2 ~ comp1, data = scores, groups = Type,
xlab = "Latent Variable 1",
xlab = "Latent Variable 2",
pch = 8)
graphics::xyplot(comp2 ~ comp1, data = scores, groups = Type,
xlab = "Latent Variable 1",
xlab = "Latent Variable 2",
pch = 8)
lattic3e::xyplot(comp2 ~ comp1, data = scores, groups = Type,
xlab = "Latent Variable 1",
xlab = "Latent Variable 2",
pch = 8)
lattice::xyplot(comp2 ~ comp1, data = scores, groups = Type,
xlab = "Latent Variable 1",
xlab = "Latent Variable 2",
pch = 8)
xyplot(comp2 ~ comp1, data = scores, groups = Type, pch = 8)
xyplot(comp2 ~ comp1, data = scores, groups = Type, pch = c(8, 1))
xyplot(comp2 ~ comp1, data = scores, groups = Type, pch = c(8, 1), cex = 2)
devtools::load_all(".")
devtools::load_all(".")
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5)
MTBLS08 <- read_chrom(chrom_08, mod_time = 5, verbose = F)
slotNames(MTBLS08)
MTBLS08@name
library(colorRamps)
plot(MTBLS08, nlevels = 100, color.palette = matlab.like)
plot(MTBLS08, nlevels = 100, color.palette = matlab.like2)
MTBLS08_bc <- baseline_corr(MTBLS08)
plot(MTBLS08_bc, nlevels = 100, color.palette = matlab.like2)
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
MTBLS579@time
MTBLS579@mod_time
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
MTBLS579@mod_time <- c(0, 5)
devtools::use_data(MTBLS579, RGCxGC, internal = TRUE)
use_data(MTBLS579, RGCxGC, internal = TRUE)
use_data(MTBLS579, ".", internal = TRUE)
library(devtools)
use_data(MTBLS579, ".", internal = TRUE)
MTBLS578 <- MTBLS579
use_data(MTBLS579, ".", internal = TRUE)
use_data(overwrite = T, MTBLS579, ".", internal = TRUE)
use_data(overwrite = T, MTBLS579, ".", internal = TRUE)
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
exp_MPCA <- m_prcomp(MTBLS579)
MTBLS579@mod_time
devtools::load_all(".")
MTBLS579@mod_time
MTBLS579@mod_time
print(exp_MPCA)
scores(exp_MPCA)
plot_loading(exp_MPCA, type = "n", main = "Negative loadings",
color.palette = matlab.like)
chrom_09 <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(chrom_09, mod_time = 5L)
devtools::load_all(".")
chrom_09 <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(chrom_09, mod_time = 5L)
500*122
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5L)
devtools::use_build_ignore("NEWS.md") )
devtools::use_build_ignore("NEWS.md")
load("~/Daniel/RGCxGC/data/Myrothecium.RData")
load("~/Daniel/RGCxGC/data/Myrothecium.RData")
tmp <- unfold_chrom(all_chrom)
View(tmp)
names(tmp)
View(tmp)
library(devtools)
Myrothecium <- all_chrom
use_data(Myrothecium, overwrite = T)
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
use_data(MTBLS579, overwrite = T)
load("~/Daniel/RGCxGC/data/Myrothecium.rda")
source('~/Daniel/RGCxGC/R/import_mixOmics.R')
c (1,1,2,3) + c(4,5,6,9)
C(2,3)* A
M <
> paste ("texto primero",texto segundo")
paste ("texto primero",texto segundo")
new("preproc_GCxGC")
GB08_fl <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
GB09_fl <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
tmp <- join_chromatograms(MTBLS08, MTBLS09)
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
class(tmp)
if ( !(is(chroms, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
if ( !(is(tmp, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
devtools::load_all(".")
if ( !(is(tmp, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
tmp2 <- reference_chrom(tmp)
tmp2 <- reference_chrom(tmp)
chroms = tmp
if ( !(is(chroms, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
base_reference(chroms)
a = base_reference(chroms)
census_chrom <- base_reference(chroms)
ref_chrom <- new("preproc_GCxGC")
ref_chrom@chromatogram <- ref_chrom
new("preproc_GCxGC")
class(a)
ref_chrom@chromatogram <- ref_chrom
chroms@time
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
census_chrom <- base_reference(chroms)
ref_chrom <- new("preproc_GCxGC")
ref_chrom@chromatogram <- census_chrom
ref_chrom@time <- chroms@time
ref_chrom@mod_time <- chroms@mod_time
joined_list <- chroms
# Unfold chrom
chroms <- joined_list@chromatograms
unfolded <- sapply(chroms,
FUN = function(x) as.vector(t(x)) )
# Get the mean for each pixel
mean_chrom <- apply(unfolded, 1, mean)
# Get chromaogram dimensions
n_col <- ncol( chroms[[1]] )
n_row <- nrow( chroms[[1]] )
# Fold the census chromatogram
census_chrom <- matrix(mean_chrom, ncol = n_col,
nrow = n_row, byrow = T)
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
devtools::load_all(".")
plot(tmp2)
devtools::load_all(".")
source('~/Daniel/RGCxGC/R/m_prcomp.R')
