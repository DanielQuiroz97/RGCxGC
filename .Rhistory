devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
class(tmp)
if ( !(is(chroms, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
if ( !(is(tmp, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
devtools::load_all(".")
if ( !(is(tmp, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
tmp2 <- reference_chrom(tmp)
tmp2 <- reference_chrom(tmp)
chroms = tmp
if ( !(is(chroms, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
base_reference(chroms)
a = base_reference(chroms)
census_chrom <- base_reference(chroms)
ref_chrom <- new("preproc_GCxGC")
ref_chrom@chromatogram <- ref_chrom
new("preproc_GCxGC")
class(a)
ref_chrom@chromatogram <- ref_chrom
chroms@time
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
census_chrom <- base_reference(chroms)
ref_chrom <- new("preproc_GCxGC")
ref_chrom@chromatogram <- census_chrom
ref_chrom@time <- chroms@time
ref_chrom@mod_time <- chroms@mod_time
joined_list <- chroms
# Unfold chrom
chroms <- joined_list@chromatograms
unfolded <- sapply(chroms,
FUN = function(x) as.vector(t(x)) )
# Get the mean for each pixel
mean_chrom <- apply(unfolded, 1, mean)
# Get chromaogram dimensions
n_col <- ncol( chroms[[1]] )
n_row <- nrow( chroms[[1]] )
# Fold the census chromatogram
census_chrom <- matrix(mean_chrom, ncol = n_col,
nrow = n_row, byrow = T)
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
devtools::load_all(".")
plot(tmp2)
devtools::load_all(".")
source('~/Daniel/RGCxGC/R/m_prcomp.R')
devtools::load_all(".")
source('~/Daniel/RGCxGC/R/batchTwoDCOW.R')
devtools::load_all(".")
GB08_fl <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
GB09_fl <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
batch_samples <- list(Chrom1 = MTBLS08, Chrom2 = MTBLS08)
batch_alignment <- batch_2DCOW(MTBLS09, batch_samples, c(10, 40), c(1, 10))
is(MTBLS09, "GCxGC")
is(batch_samples, "list")
tmp <-  baseline_corr(MTBLS08)
batch_alignment <- batch_2DCOW(tmp, batch_samples, c(10, 40), c(1, 10))
method_batch_2DCOW()
method_batch_2DCOW
showMethods("method_batch_2DCOW")
showMethods("plo")
showMethods("plot")
#' @exportMethod plot
#' @examples
#'
#' library(colorRamps)
#' chrom_name <-  system.file("extdata", "08GB.cdf", package = "RGCxGC")
#' chrom_2D <- read_chrom(chrom_name, 5L)
#' plot(chrom_2D, nlevels = 150, color.palette = matlab.like)
#' plot(chrom_2D, type = "c", nlevels = 50, col = matlab.like(30))
#' @references
#'     \insertAllCited{}
setMethod(f = 'plot', signature = 'GCxGC',
definition = function(Object, type = "f", ...){
if ( !(type %in% c("f", "c")) )
stop("Only f (filled contour) and c (contour) types are allowed")
labx <- round(seq(Object@time[1], Object@time[2],
length.out = 5), 2)
laby <- round(seq(Object@mod_time[1], Object@mod_time[2],
length.out = 5), 2)
if (type %in% "f"){
graphics::filled.contour(t(Object@chromatogram),
plot.axes = {
axis(1, at = seq(0, 1, length.out = 5),
labels = labx)
axis(2, at = seq(0, 1, length.out = 5),
labels = laby)
}, xlab = "1D min", ylab = "2D sec",
... = ...)
} else {
graphics::contour(t(Object@chromatogram),
drawlabels = FALSE,
frame.plot = TRUE,
axes = FALSE,
xlab = "1D min", ylab = "2D sec",
... = ...)
axis(1, at = seq(0, 1, length.out = 5),
labels = labx)
axis(2, at = seq(0, 1, length.out = 5),
labels = laby)
}
})
plot(tmp)
libr
library(RGCxGC)
GB08_fl <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
GB09_fl <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
batch_samples <- list(Chrom1 = MTBLS08, Chrom2 = MTBLS08)
devtools::load_all(".")
batch_alignment <- batch_2DCOW(MTBLS09, batch_samples, c(10, 40), c(1, 10))
devtools::load_all(".")
batch_alignment <- batch_2DCOW(MTBLS09, batch_samples, c(10, 40), c(1, 10))
tmp <-  lapply(batch_samples, method_TwoDCOW, MTBLS08,segments = c(10, 40), max_warp = c(1, 10))
devtools::load_all(".")
batch_alignment <- batch_2DCOW(MTBLS09, batch_samples, c(10, 40), c(1, 10))
load("~/Daniel/Fabio Augusto/all_chrom.RData")
chrom <- all_chrom
chrom_dim <- t(sapply(chrom@chromatograms, dim))
D1  <- unique(chrom_dim[, 1])
D2 <- unique(chrom_dim[, 2])
if (length(D1) > 1 | length(D2) > 1)
stop('All chromatograms muts have the same dimesions')
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
raw_signal <-  t(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
raw_signal <- raw_signal[, col_0var]
pca <- prcomp(raw_signal, center = center, scale. = scale, ...)
center = T
scale = T
pca <- prcomp(raw_signal, center = center, scale. = scale)
raw_signal <- raw_signal[, -col_0var]
pca <- prcomp(raw_signal, center = center, scale. = scale)
raw_signal <-  t(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
raw_signal <- raw_signal[, -col_0var]
pca <- prcomp(raw_signal, center = center, scale. = scale)
dim(raw_signal)
View(raw_signal)
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
View(raw_signal)
raw_signal <-  t(raw_signal)
dim(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
col_removed
raw_signal <- raw_signal[, -col_removed]
tmp <- apply(raw_signal, 2, var) != 0
sum
sum(tmp)
sum(is.na(tmp))
which(is.na(tmp))
raw_signal[, 368]
raw_signal[is.na(raw_signal)] <- 0
pca <- prcomp(raw_signal, center = center, scale. = scale, ...)
pca <- prcomp(raw_signal, center = center, scale. = scale)
sum_pca <- list(summary = summary(pca))
lds <-  lapply(seq(npcs), function(i) pca$rotation[, i])
names(lds) <- paste0("PC", seq(npcs))
loadings <- list("loadings" = lds, "var_col" = col_removed,
"dimension" = c(nrow = D1, ncol = D2))
devtools::load_all(".")
m_scores <- scores(yeast_mpca)
yeast_mpca <- m_prcomp(all_chrom)
plot_loading(yeast_mpca, type = "n", thresh = -0.004, color.palette = colfunc )
colfunc<-colorRampPalette(c("red","yellow", "yellow","springgreen","springgreen","royalblue"))
plot_loading(yeast_mpca, type = "n", color.palette = colfunc )
class(M)
M
colnames (M) <- c ("v1", "v2")
M
rownames (M) <- c ("row1", "row2", "row3", "row4") #ASIGNANDO nombres a las filas
vector 1 < - 1:4
vector(2) < - (2,4,6,8,10,12)
M cbind(vector1,vector2)
vector 1 <-1:4
mr (list=lls())
rm (list=lls())
rm (list=ls())
vector(1) <- (1,2,3,4)
vector1 <- (1,2,3,4)
vector1 <- c(1,2,3,4)
vector2 <- c(5,6,7,8)
vector3 <- c(9,10,11,12)
cbind (vector1, vector2, vector3)
colnames (M) <- c ("v1", "v2","V3")
colnames (M) <- c ("a", "b","c")
colnames (M) <- c ("a", "b","c")
M = cbind (vector1, vector2, vector3)
m
M
colnames (M) <- c ("a", "b","c")
m
M
rownames (M) ("A", "B", "C", "D")
rownames (M)<-c ("A", "B", "C", "D")
m
M
M=N
N=M
n
N
N=t(M)
N
%N*%M
NM = %N*%M
NM2 = %N*%M
MN2 = M%*%N
M
devtools::load_all(".")
data(MTBLS579)
exp_MPCA <- m_prcomp(MTBLS579)
exp_MPCA <- m_prcomp(MTBLS579, center = T, scale = F)
chrom <- MTBLS579
chrom_dim <- t(sapply(chrom@chromatograms, dim))
D1  <- unique(chrom_dim[, 1])
D2 <- unique(chrom_dim[, 2])
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
raw_signal <-  t(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_0var
which(col_0var)
apply(raw_signal, 2, var)
col_removed <- which(!col_0var)
col_removed
raw_signal <- raw_signal[, -col_removed]
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
raw_signal <- raw_signal[, -col_removed]
length(col_removed)
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
raw_signal <-  t(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
length(col_removed) != 0
if (length(col_removed) != 0)
raw_signal <- raw_signal[, -col_removed]
devtools::load_all(".")
exp_MPCA <- m_prcomp(MTBLS579, center = T, scale = F)
print(exp_MPCA)
exp_MPCA <- m_prcomp(MTBLS579, center = T, scale = T)
print(exp_MPCA)
exp_MPCA <- m_prcomp(MTBLS579, center = T, scale = F)
print(exp_MPCA)
scores(exp_MPCA)
TMP <- scores(exp_MPCA)
library(TMP)
library(tidyverse)
ggplot(TMP, aes(PC1, PC2)) + geom_point()
ggplot(TMP, aes(PC1, PC2, color = Type)) + geom_point()
ggplot(TMP, aes(PC1, PC2, color = Type)) + geom_point(alpha = 0.5)
data(Myrothecium)
myr_data <- get_metadata(Myrothecium)
myr_data
50*0.3
devtools::load_all(".")
GB08_fl <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
GB09_fl <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
joined <-  join_chromatograms(MTBLS08, MTBLS09)
reference <- reference_chrom(joined)
reference <- reference_chrom(joined, stat = "mean")
devtools::load_all(".")
reference <- reference_chrom(joined)
library(acs)
install.packages("acs")
library(acs)
library(help acs)
libcurlVersion(help="acs-package")
library(help="acs-package")
help(acs)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
library(multtest)
getwd()
dir()
setwd("data")
getwd
setwd(..)
setwd("..")
getwd
dir.create("Nuevodir")
dir()
list.files()
dir(path = "data")
dir(pattern = "r")
dir()
file.exists("data")
file.copy("man")
file.remove("Nuevodir")
dir()
?save.image
getwd
dir.create("pruebaDir")
getwd
dir()
dir create("pruebaDir")
dir.create("pruebaDir")
dir()
dir path("pruebaDir")
dir(path="pruebaDir")
getwd
getwd()
dir(path = "pruebaDir")
setwd("pruebaDir")
getwd()
file.create("fich1.csv")
file.create("fich2.csv")
file.create("fich2.txt")
dir()
file exists(fich1.csv)
file.exists("fich1.csv")
file.exists("fich2.txt")
10/0.01
10/0.01*1000
getwd()
dir
dir()
getwd
getwd()
dir()
getwd()
setwd(home/cizquime/Maggy)
setwd(Maggy)
setwd("/home/cizquime/Daniel/RGCxGC/estres.csv")
getwd
getwd()
dir()
list.file()
list.files()
dir.create("prueba.dir")
getwd
getwd()
dir()
dir("/home/cizquime/Daniel/RGCxGC/prueba.dir")
file.create("riesgos.csv")
dir()
file.exists()
file.exists("prueba.dir")
file.copy("estres.csv")
file.copy("Home/estres.csv")
file.exists("Maggy")
file exist ("Home)")
file exist ("Home)"
file.exists(Home)
dir("/home/cizquime/Daniel/RGCxGC/Maggy")
file.create("EjerciciosR")
dir()
files.remove("/home/cizquime/Daniel/RGCxGC/riesgos.csv")
file.remove("/home/cizquime/Daniel/RGCxGC/riesgos.csv")
dir()
exit
quit
vignette("Biomarker_Analysis", package = "MetaboAnalystR")
?usethis::use_vignette
?usethis::use_vignette("plotting_chromatograms", "Customizing 2D chromatogram visualization")
usethis::use_vignette("plotting_chromatograms", "Customizing 2D chromatogram visualization")
?symbols
x <- 1:10
y <- sort(10*runif(10))
z <- runif(10)
z3 <- cbind(z, 2*runif(10), runif(10))
View(z3)
symbols(x, y, thermometers = cbind(.5, 1, z), inches = .5, fg = 1:10)
s
?contour
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5)
library(RGCxGC)
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5)
slotNames(MTBLS08)
library(RGCxGC)
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5)
slotNames(MTBLS08)
library(RGCxGC)
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5, verbose = F)
slotNames(MTBLS08)
plot(chrom_08)
library(RGCxGC)
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5, verbose = F)
slotNames(MTBLS08)
plot(chrom_08)
plot(MTBLS08)
library(colorRamps)
library(colorRamps)
plot(MTBLS08, type = "f", color.palette = matlab.like )
library(colorRamps)
plot(MTBLS08, type = "f", color.palette = matlab.like,
main =  "matlab.like")
plot(MTBLS08, type = "f", color.palette = matlab.like2,
main =  "matlab.like2")
data(package = "RGCxGC")
data("Myrothecium",package = "RGCxGC")
Myrothecium
contour(t(Myrothecium@chromatograms$MylAd5))
contour(t(Myrothecium@chromatograms$MylDd5))
contour(t(Myrothecium@chromatograms$MylDd5), nlevels = 100)
chrom_08 <- system.file("extdata", "mylbd5.CDF", package = "RGCxGC")
chrom_08 <- system.file("extdata", "mylbd5.CDF", package = "RGCxGC")
chrom_08
myl_d5 <- system.file("extdata", "mylbd5.CDF", package = "RGCxGC")
myl <- read_chrom(myl_d5, mod_time = 5, sam_rate = 25)
library(RGCxGC)
library(colorRamps)
myl_d5 <- system.file("extdata", "mylbd5.CDF", package = "RGCxGC")
myl <- read_chrom(myl_d5, mod_time = 5, sam_rate = 25)
plot(myl, color.palette = matlab.like2 )
myl_d5 <- system.file("extdata", "mylbd5.CDF", package = "RGCxGC")
myl <- read_chrom(myl_d5, mod_time = 5, sam_rate = 25, verbose = F)
plot(myl, color.palette = matlab.like2 )
knitr::include_graphics("images/may_chrom.jpg")
myl_deph <- dephase_chrom(myl, rel_dephase = 65)
plot(myl, color.palette = matlab.like2 )
myl_deph <- dephase_chrom(myl, rel_dephase = 65)
plot(myl_deph, color.palette = matlab.like2 )
knitr::include_graphics("images/may_chrom.jpg")
plot(myl_deph, col = matlab.like2(10) )
plot(myl_deph, type = "c",col = matlab.like2(10) )
plot(myl_deph, type = "c",col = matlab.like2(25) )
plot(myl_deph, type = "c",col = matlab.like2(5) )
plot(myl_deph, type = "c",col = matlab.like2(10) )
plot(myl_deph, type = "c",col = matlab.like(10) )
plot(myl_deph, type = "c",col = matlab.like2(10) )
my_palette <- colorRampPalette(rev(c("red","yellow","springgreen",
"blue", "white")))
plot(myl_deph, type = "c", col = my_palette(10) )
plot(myl_deph, type = "c", col = my_palette(30), nlevels = 30 )
plot(myl_deph, type = "c", col = my_palette(50), nlevels = 50 )
plot(myl_deph, type = "c", col = my_palette(50), nlevels = 100 )
plot(myl_deph, type = "c", col = my_palette(100), nlevels = 100 )
plot(myl_deph, type = "c", col = my_palette(50), nlevels = 100 )
plot(myl_deph, type = "c", col = my_palette(25), nlevels = 100 )
plot(myl_deph, type = "c", col = my_palette(35), nlevels = 100 )
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
usethis::use_build_ignore("R/sticker.R")
library(mixOmics)
BiocManager::install("mixOmics")
BiocManager::install("caret")
install.packages("ggiraph")
install.packages("ggiraph")
BiocManager::install("mixOmics")
BiocManager::install("mixOmics", force = T)
library(mixOmics)
library(cret)
library(caret)
data("Myrothecium")
load("~/Documents/RGCxGC/data/Myrothecium.rda")
install.packages("RGCxGC")
load("~/Documents/RGCxGC/data/Myrothecium.rda")
list_chrom <- unfold_chrom(Myrothecium)
unfolded_chrom <- list_chrom$chromatogram
colnames(unfolded_chrom) <- paste0("RT", seq(dim(unfolded_chrom)[2]))
metadata <- get_metadata(Myrothecium)
index <- get_metadata(Myrothecium)
Y <- factor(index$Type)
set.seed(10)
chrom_dim <- dim(unfolded_chrom)[2]
list.keepX <- seq(chrom_dim/3, chrom_dim, by = 5000)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'loo',
progressBar = TRUE, dist = 'max.dist',
test.keepX = list.keepX)
install.packages("prettydoc")
Sys.which("pdflatex")
Sys.getenv("PATH")
install.packages("roxygen2")
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("testthat")
install.packages("testthat")
library(RGCxGC)
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5, verbose = F)
slotNames(MTBLS08)
install.packages('tinytex')
update.packages(ask = FALSE, checkBuilt = TRUE)
load("~/Documents/RGCxGC/data/MTBLS579.rda")
load("~/Documents/RGCxGC/data/Myrothecium.rda")
