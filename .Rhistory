chrom_dim <- dim(unfolded_chrom)[2]
list.keepX <- seq(chrom_dim/3, chrom_dim, by = 5000)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'Mfold',
folds = 8,
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX, nrepeat = 20)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'Mfold',
folds = 2,
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX, nrepeat = 20)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'Mfold',
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX, nrepeat = 20)
?tune.splsda
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'loo',
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX, nrepeat = 20)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'loo',
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX)
graphics::plot(tune.splsda)
tune.splsda$choice.ncomp
tune.splsda$choice.keepX
splsda_final <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = list.keepX)
splsda_final <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = list.keepX)
library(mixOmics)
library(caret)
data(Myrothecium)
devtools::load_all(".")
data(Myrothecium)
list_chrom <- unfold_chrom(all_chrom)
unfolded_chrom <- list_chrom$chromatogram
colnames(unfolded_chrom) <- paste0("RT", seq(dim(unfolded_chrom)[2]))
index <- get_metadata(all_chrom)
Y <- factor(index$Type)
set.seed(10)
chrom_dim <- dim(unfolded_chrom)[2]
list.keepX <- seq(chrom_dim/3, chrom_dim, by = 5000)
tune.splsda <- tune.splsda(unfolded_chrom, Y, ncomp = 2, validation = 'loo',
progressBar = T, dist = 'max.dist', cpus = 12,
test.keepX = list.keepX)
graphics::plot(tune.splsda)
tune.splsda$choice.keepX
splsda_final <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = list.keepX)
2000000*2/2000
2000000*2/2000*(2/2000)
2000000*200*2/(2000*2000)
2000000*100*2/(2000*2000)
splsda_final <- splsda(unfolded_chrom, Y, ncomp = 2, keepX = list.keepX)
splsda_final <- splsda(unfolded_chrom, Y)
?nearZeroVar
tmp <- caret::nearZeroVar(unfolded_chrom)
zero_var <- caret::nearZeroVar(unfolded_chrom)
unfolded_chrom <- unfolded_chrom[, -zero_var]
splsda_final <- splsda(unfolded_chrom, Y)
?splsda
splsda_final <- mixOmics::splsda(unfolded_chrom, Y)
splsda_final <- mixOmics::splsda(unfolded_chrom, Y,
ncomp = 2, keepX = list.keepX)
splsda_final$variates$X
scores <- as.data.frame(splsda_final$variates$X)
scores
scores$Names <- rownames(scores)
score
scores
scores <- merge(scores, metadata)
all_chrom@groups
metadata <- get_metadata(all_chrom)
scores <- merge(scores, metadata)
scores
xyplot(comp2 ~ comp1, data = scores)
xyplot(comp2 ~ comp1, data = scores, groups = Type)
xyplot(comp2 ~ comp1, data = scores, groups = Type,
xlab = "Latent Variable 1",
xlab = "Latent Variable 2",
pch = 8)
graphics::xyplot(comp2 ~ comp1, data = scores, groups = Type,
xlab = "Latent Variable 1",
xlab = "Latent Variable 2",
pch = 8)
lattic3e::xyplot(comp2 ~ comp1, data = scores, groups = Type,
xlab = "Latent Variable 1",
xlab = "Latent Variable 2",
pch = 8)
lattice::xyplot(comp2 ~ comp1, data = scores, groups = Type,
xlab = "Latent Variable 1",
xlab = "Latent Variable 2",
pch = 8)
xyplot(comp2 ~ comp1, data = scores, groups = Type, pch = 8)
xyplot(comp2 ~ comp1, data = scores, groups = Type, pch = c(8, 1))
xyplot(comp2 ~ comp1, data = scores, groups = Type, pch = c(8, 1), cex = 2)
devtools::load_all(".")
devtools::load_all(".")
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5)
MTBLS08 <- read_chrom(chrom_08, mod_time = 5, verbose = F)
slotNames(MTBLS08)
MTBLS08@name
library(colorRamps)
plot(MTBLS08, nlevels = 100, color.palette = matlab.like)
plot(MTBLS08, nlevels = 100, color.palette = matlab.like2)
MTBLS08_bc <- baseline_corr(MTBLS08)
plot(MTBLS08_bc, nlevels = 100, color.palette = matlab.like2)
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
MTBLS579@time
MTBLS579@mod_time
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
MTBLS579@mod_time <- c(0, 5)
devtools::use_data(MTBLS579, RGCxGC, internal = TRUE)
use_data(MTBLS579, RGCxGC, internal = TRUE)
use_data(MTBLS579, ".", internal = TRUE)
library(devtools)
use_data(MTBLS579, ".", internal = TRUE)
MTBLS578 <- MTBLS579
use_data(MTBLS579, ".", internal = TRUE)
use_data(overwrite = T, MTBLS579, ".", internal = TRUE)
use_data(overwrite = T, MTBLS579, ".", internal = TRUE)
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
exp_MPCA <- m_prcomp(MTBLS579)
MTBLS579@mod_time
devtools::load_all(".")
MTBLS579@mod_time
MTBLS579@mod_time
print(exp_MPCA)
scores(exp_MPCA)
plot_loading(exp_MPCA, type = "n", main = "Negative loadings",
color.palette = matlab.like)
chrom_09 <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(chrom_09, mod_time = 5L)
devtools::load_all(".")
chrom_09 <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(chrom_09, mod_time = 5L)
500*122
chrom_08 <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(chrom_08, mod_time = 5L)
devtools::use_build_ignore("NEWS.md") )
devtools::use_build_ignore("NEWS.md")
load("~/Daniel/RGCxGC/data/Myrothecium.RData")
load("~/Daniel/RGCxGC/data/Myrothecium.RData")
tmp <- unfold_chrom(all_chrom)
View(tmp)
names(tmp)
View(tmp)
library(devtools)
Myrothecium <- all_chrom
use_data(Myrothecium, overwrite = T)
load("~/Daniel/RGCxGC/data/MTBLS579.rda")
use_data(MTBLS579, overwrite = T)
load("~/Daniel/RGCxGC/data/Myrothecium.rda")
source('~/Daniel/RGCxGC/R/import_mixOmics.R')
c (1,1,2,3) + c(4,5,6,9)
C(2,3)* A
M <
> paste ("texto primero",texto segundo")
paste ("texto primero",texto segundo")
new("preproc_GCxGC")
GB08_fl <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
GB09_fl <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
tmp <- join_chromatograms(MTBLS08, MTBLS09)
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
class(tmp)
if ( !(is(chroms, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
if ( !(is(tmp, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
devtools::load_all(".")
if ( !(is(tmp, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
tmp2 <- reference_chrom(tmp)
tmp2 <- reference_chrom(tmp)
chroms = tmp
if ( !(is(chroms, "joined_chrom")) )
stop("The provided argument is not a joined_chrom object")
base_reference(chroms)
a = base_reference(chroms)
census_chrom <- base_reference(chroms)
ref_chrom <- new("preproc_GCxGC")
ref_chrom@chromatogram <- ref_chrom
new("preproc_GCxGC")
class(a)
ref_chrom@chromatogram <- ref_chrom
chroms@time
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
tmp2 <- reference_chrom(tmp)
census_chrom <- base_reference(chroms)
ref_chrom <- new("preproc_GCxGC")
ref_chrom@chromatogram <- census_chrom
ref_chrom@time <- chroms@time
ref_chrom@mod_time <- chroms@mod_time
joined_list <- chroms
# Unfold chrom
chroms <- joined_list@chromatograms
unfolded <- sapply(chroms,
FUN = function(x) as.vector(t(x)) )
# Get the mean for each pixel
mean_chrom <- apply(unfolded, 1, mean)
# Get chromaogram dimensions
n_col <- ncol( chroms[[1]] )
n_row <- nrow( chroms[[1]] )
# Fold the census chromatogram
census_chrom <- matrix(mean_chrom, ncol = n_col,
nrow = n_row, byrow = T)
tmp2 <- reference_chrom(tmp)
devtools::load_all(".")
devtools::load_all(".")
plot(tmp2)
devtools::load_all(".")
source('~/Daniel/RGCxGC/R/m_prcomp.R')
devtools::load_all(".")
source('~/Daniel/RGCxGC/R/batchTwoDCOW.R')
devtools::load_all(".")
GB08_fl <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
GB09_fl <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
batch_samples <- list(Chrom1 = MTBLS08, Chrom2 = MTBLS08)
batch_alignment <- batch_2DCOW(MTBLS09, batch_samples, c(10, 40), c(1, 10))
is(MTBLS09, "GCxGC")
is(batch_samples, "list")
tmp <-  baseline_corr(MTBLS08)
batch_alignment <- batch_2DCOW(tmp, batch_samples, c(10, 40), c(1, 10))
method_batch_2DCOW()
method_batch_2DCOW
showMethods("method_batch_2DCOW")
showMethods("plo")
showMethods("plot")
#' @exportMethod plot
#' @examples
#'
#' library(colorRamps)
#' chrom_name <-  system.file("extdata", "08GB.cdf", package = "RGCxGC")
#' chrom_2D <- read_chrom(chrom_name, 5L)
#' plot(chrom_2D, nlevels = 150, color.palette = matlab.like)
#' plot(chrom_2D, type = "c", nlevels = 50, col = matlab.like(30))
#' @references
#'     \insertAllCited{}
setMethod(f = 'plot', signature = 'GCxGC',
definition = function(Object, type = "f", ...){
if ( !(type %in% c("f", "c")) )
stop("Only f (filled contour) and c (contour) types are allowed")
labx <- round(seq(Object@time[1], Object@time[2],
length.out = 5), 2)
laby <- round(seq(Object@mod_time[1], Object@mod_time[2],
length.out = 5), 2)
if (type %in% "f"){
graphics::filled.contour(t(Object@chromatogram),
plot.axes = {
axis(1, at = seq(0, 1, length.out = 5),
labels = labx)
axis(2, at = seq(0, 1, length.out = 5),
labels = laby)
}, xlab = "1D min", ylab = "2D sec",
... = ...)
} else {
graphics::contour(t(Object@chromatogram),
drawlabels = FALSE,
frame.plot = TRUE,
axes = FALSE,
xlab = "1D min", ylab = "2D sec",
... = ...)
axis(1, at = seq(0, 1, length.out = 5),
labels = labx)
axis(2, at = seq(0, 1, length.out = 5),
labels = laby)
}
})
plot(tmp)
libr
library(RGCxGC)
GB08_fl <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
GB09_fl <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
batch_samples <- list(Chrom1 = MTBLS08, Chrom2 = MTBLS08)
devtools::load_all(".")
batch_alignment <- batch_2DCOW(MTBLS09, batch_samples, c(10, 40), c(1, 10))
devtools::load_all(".")
batch_alignment <- batch_2DCOW(MTBLS09, batch_samples, c(10, 40), c(1, 10))
tmp <-  lapply(batch_samples, method_TwoDCOW, MTBLS08,segments = c(10, 40), max_warp = c(1, 10))
devtools::load_all(".")
batch_alignment <- batch_2DCOW(MTBLS09, batch_samples, c(10, 40), c(1, 10))
load("~/Daniel/Fabio Augusto/all_chrom.RData")
chrom <- all_chrom
chrom_dim <- t(sapply(chrom@chromatograms, dim))
D1  <- unique(chrom_dim[, 1])
D2 <- unique(chrom_dim[, 2])
if (length(D1) > 1 | length(D2) > 1)
stop('All chromatograms muts have the same dimesions')
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
raw_signal <-  t(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
raw_signal <- raw_signal[, col_0var]
pca <- prcomp(raw_signal, center = center, scale. = scale, ...)
center = T
scale = T
pca <- prcomp(raw_signal, center = center, scale. = scale)
raw_signal <- raw_signal[, -col_0var]
pca <- prcomp(raw_signal, center = center, scale. = scale)
raw_signal <-  t(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
raw_signal <- raw_signal[, -col_0var]
pca <- prcomp(raw_signal, center = center, scale. = scale)
dim(raw_signal)
View(raw_signal)
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
View(raw_signal)
raw_signal <-  t(raw_signal)
dim(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
col_removed
raw_signal <- raw_signal[, -col_removed]
tmp <- apply(raw_signal, 2, var) != 0
sum
sum(tmp)
sum(is.na(tmp))
which(is.na(tmp))
raw_signal[, 368]
raw_signal[is.na(raw_signal)] <- 0
pca <- prcomp(raw_signal, center = center, scale. = scale, ...)
pca <- prcomp(raw_signal, center = center, scale. = scale)
sum_pca <- list(summary = summary(pca))
lds <-  lapply(seq(npcs), function(i) pca$rotation[, i])
names(lds) <- paste0("PC", seq(npcs))
loadings <- list("loadings" = lds, "var_col" = col_removed,
"dimension" = c(nrow = D1, ncol = D2))
devtools::load_all(".")
m_scores <- scores(yeast_mpca)
yeast_mpca <- m_prcomp(all_chrom)
plot_loading(yeast_mpca, type = "n", thresh = -0.004, color.palette = colfunc )
colfunc<-colorRampPalette(c("red","yellow", "yellow","springgreen","springgreen","royalblue"))
plot_loading(yeast_mpca, type = "n", color.palette = colfunc )
class(M)
M
colnames (M) <- c ("v1", "v2")
M
rownames (M) <- c ("row1", "row2", "row3", "row4") #ASIGNANDO nombres a las filas
vector 1 < - 1:4
vector(2) < - (2,4,6,8,10,12)
M cbind(vector1,vector2)
vector 1 <-1:4
mr (list=lls())
rm (list=lls())
rm (list=ls())
vector(1) <- (1,2,3,4)
vector1 <- (1,2,3,4)
vector1 <- c(1,2,3,4)
vector2 <- c(5,6,7,8)
vector3 <- c(9,10,11,12)
cbind (vector1, vector2, vector3)
colnames (M) <- c ("v1", "v2","V3")
colnames (M) <- c ("a", "b","c")
colnames (M) <- c ("a", "b","c")
M = cbind (vector1, vector2, vector3)
m
M
colnames (M) <- c ("a", "b","c")
m
M
rownames (M) ("A", "B", "C", "D")
rownames (M)<-c ("A", "B", "C", "D")
m
M
M=N
N=M
n
N
N=t(M)
N
%N*%M
NM = %N*%M
NM2 = %N*%M
MN2 = M%*%N
M
devtools::load_all(".")
data(MTBLS579)
exp_MPCA <- m_prcomp(MTBLS579)
exp_MPCA <- m_prcomp(MTBLS579, center = T, scale = F)
chrom <- MTBLS579
chrom_dim <- t(sapply(chrom@chromatograms, dim))
D1  <- unique(chrom_dim[, 1])
D2 <- unique(chrom_dim[, 2])
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
raw_signal <-  t(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_0var
which(col_0var)
apply(raw_signal, 2, var)
col_removed <- which(!col_0var)
col_removed
raw_signal <- raw_signal[, -col_removed]
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
raw_signal <- raw_signal[, -col_removed]
length(col_removed)
raw_signal <- sapply(chrom@chromatograms,
function(x) as.vector(t(x)) )
raw_signal <-  t(raw_signal)
col_0var <- apply(raw_signal, 2, var) != 0
col_removed <- which(!col_0var)
length(col_removed) != 0
if (length(col_removed) != 0)
raw_signal <- raw_signal[, -col_removed]
devtools::load_all(".")
exp_MPCA <- m_prcomp(MTBLS579, center = T, scale = F)
print(exp_MPCA)
exp_MPCA <- m_prcomp(MTBLS579, center = T, scale = T)
print(exp_MPCA)
exp_MPCA <- m_prcomp(MTBLS579, center = T, scale = F)
print(exp_MPCA)
scores(exp_MPCA)
TMP <- scores(exp_MPCA)
library(TMP)
library(tidyverse)
ggplot(TMP, aes(PC1, PC2)) + geom_point()
ggplot(TMP, aes(PC1, PC2, color = Type)) + geom_point()
ggplot(TMP, aes(PC1, PC2, color = Type)) + geom_point(alpha = 0.5)
data(Myrothecium)
myr_data <- get_metadata(Myrothecium)
myr_data
50*0.3
devtools::load_all(".")
GB08_fl <- system.file("extdata", "08GB.cdf", package = "RGCxGC")
MTBLS08 <- read_chrom(GB08_fl, mod_time = 5)
GB09_fl <- system.file("extdata", "09GB.cdf", package = "RGCxGC")
MTBLS09 <- read_chrom(GB09_fl, mod_time = 5)
joined <-  join_chromatograms(MTBLS08, MTBLS09)
reference <- reference_chrom(joined)
reference <- reference_chrom(joined, stat = "mean")
devtools::load_all(".")
reference <- reference_chrom(joined)
library(acs)
install.packages("acs")
library(acs)
library(help acs)
libcurlVersion(help="acs-package")
library(help="acs-package")
help(acs)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
library(multtest)
getwd()
dir()
setwd("data")
getwd
setwd(..)
setwd("..")
getwd
dir.create("Nuevodir")
dir()
list.files()
dir(path = "data")
dir(pattern = "r")
dir()
file.exists("data")
file.copy("man")
file.remove("Nuevodir")
dir()
?save.image
getwd
dir.create("pruebaDir")
getwd
dir()
dir create("pruebaDir")
dir.create("pruebaDir")
dir()
dir path("pruebaDir")
dir(path="pruebaDir")
getwd
getwd()
dir(path = "pruebaDir")
setwd("pruebaDir")
getwd()
file.create("fich1.csv")
file.create("fich2.csv")
file.create("fich2.txt")
dir()
file exists(fich1.csv)
file.exists("fich1.csv")
file.exists("fich2.txt")
